Previous code can be found in ~/Dropbox/ThesisCeid/mpi-tests/lapacke_tests/exclusion\ tests/


The File named svd_no_disks.c implements the GRID method for computing pseudospectra of a matrix.
NGRID=80 N,M=32 svd_evaluations=6400  
a random time measurement: (1 seconds, 717358 microseconds)


The File named svd_with_disks_simple.c implements the simple Inclusion-Exclusion method for computing pseudospectra of a matrix.
NGRID=80 N,M=32 svd_evaluations=2115
a random time measurement: (0 seconds, 756655 microseconds)


The File named svd_with_disks_between.c implements the Inclusion-Exclusion technique even between consecutive level of contours.
NGRID=80 N,M=32 svd_evaluations=2067 (Only for large number of grid size)
a random time measurement: (0 seconds, 574705 microseconds)
The .mat file produced by this function is not exactly the same as the file produced by the simple grid method. 


The File named svd_with_disks_gradient.c implements the Inclusion-Exclusion method for computing pseudospectra of a matrix,
but the radius of exclusion disks is multipled by a factor 1/abs(gradient(z)) for a disks with z as the center.
NGRID=80 N,M=32 svd_evaluations=1975
a random time measurement: (2 seconds, 550498 microseconds)
The mat file is more siminal with the one produced my simple grid method, but not quiet the same.

paralleltest_2 is my "attempt" of parallel algorithm for finding pseudospectra
The File named svd_with_disks_multiple.c implements the Inclusion-Exclusion technique with multiple disks with the same center
and different radius values depending the included level of contours.
NGRID=80 N,M=32 svd_evaluations=1961 
a random time measurement:  (0 seconds, 736275 microseconds)


The File named svd_with_disks_multiple_gradient.c implements the Inclusion-Exclusion technique with multiple disks with the same center
and different radius values depending the included level of contours. The radius of exclusion disks is multipled by a factor 1/abs(gradient(z)) for a disks with z as the center.
NGRID=80 N,M=32 svd_evaluations=1859
a random time measurement:  (6 seconds, 736275 microseconds)


The main code for the sequential implememntation of faster mog with inclusion disks algorithm is new_gallop_1.c
new_gallop_2.c is wrong.DO NOT USE IT 

Matrix kahan.mat is created through matlab while executing the command kahan=gallery('kahan',N);
and store it in a .txt file with save('kahan.txt', 'kahan', '-ASCII');.
Then function kahanmat2c.c copy kahan matrix from a file in an array in c.


Matrix that come from the Orr-Sommerfeld operator of dimension (N-1)x(N-1) is produce with the command  C = orrsommerfeld_demo(N);
of the matlab's gui eigtool. We should extract the imaginary part because command save applied on a complex number
doesn't save the imaginary part, only the real one.for i=1:N-1 , for j=1:N-1, imagineC(i,j)=imag(C(i,j)); end, end
and now store both imaginary and real part as a .txt file with save('orrsommerreal.txt', 'C', '-ASCII'); save('orrsommerimag.txt', 'imagineC', '-ASCII');.
Then function orrsommermat2c.c copy orrsommer matrix from a file in an array in c.




